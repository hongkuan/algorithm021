1.前缀树（Trie）
核心思想：空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提供效率目的。
性质：
a.结点本身不存在完整单词；
b.从根节点到某一节点，路径经过字符连接起来，为该节点对应字符串；
c.每个节点代表的所有子节点代表的字符串都不相同。

2.并查集
基本操作：
a.makeSet(s)：建立一个新的并查集，其中包含 s 个单元素集合。
b.unionSet(x, y)：把元素 x 和元素 y 所在的集合合并，要求 x 和 y 所在的集合不相交，如果相交则不合并。
c.find(x)：找到元素 x 所在的集合的代表，该操作也可以用于判断两个元素是否位于同一个集合，只要将它们各自的代表比较一下就可以了。
Java代码模板：
class UnionFind {
private int count = 0;
private int[] parent;
public UnionFind(int n) {
 count = n;
 parent = new int[n];
 for (int i = 0; i < n; i++) {
 parent[i] = i;
 }
}
public int find(int p) {
 while (p != parent[p]) {
 parent[p] = parent[parent[p]];
 p = parent[p];
 }
 return p;
}
public void union(int p, int q) {
 int rootP = find(p);
 int rootQ = find(q);
 if (rootP == rootQ) return;
 parent[rootP] = rootQ;
 count--;
}
}

3.搜索
初级搜索
a. 朴素搜索
b. 优化方式：不重复（fibonacci）、剪枝（生成括号问题）
c. 搜索方向：
DFS: depth first search 深度优先搜索
BFS: breadth first search 广度优先搜索
高级搜索：
双向搜索、启发式搜索
